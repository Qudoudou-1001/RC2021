// Generated by gencpp from file rcnn_ros/results.msg
// DO NOT EDIT!


#ifndef RCNN_ROS_MESSAGE_RESULTS_H
#define RCNN_ROS_MESSAGE_RESULTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rcnn_ros/detection.h>

namespace rcnn_ros
{
template <class ContainerAllocator>
struct results_
{
  typedef results_<ContainerAllocator> Type;

  results_()
    : stamp()
    , results()  {
    }
  results_(const ContainerAllocator& _alloc)
    : stamp()
    , results(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector< ::rcnn_ros::detection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::rcnn_ros::detection_<ContainerAllocator> >::other >  _results_type;
  _results_type results;





  typedef boost::shared_ptr< ::rcnn_ros::results_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rcnn_ros::results_<ContainerAllocator> const> ConstPtr;

}; // struct results_

typedef ::rcnn_ros::results_<std::allocator<void> > results;

typedef boost::shared_ptr< ::rcnn_ros::results > resultsPtr;
typedef boost::shared_ptr< ::rcnn_ros::results const> resultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rcnn_ros::results_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rcnn_ros::results_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rcnn_ros::results_<ContainerAllocator1> & lhs, const ::rcnn_ros::results_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.results == rhs.results;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rcnn_ros::results_<ContainerAllocator1> & lhs, const ::rcnn_ros::results_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rcnn_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rcnn_ros::results_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rcnn_ros::results_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rcnn_ros::results_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rcnn_ros::results_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcnn_ros::results_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcnn_ros::results_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rcnn_ros::results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "128a74f45c3c1bb074f854b411cdfc9d";
  }

  static const char* value(const ::rcnn_ros::results_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x128a74f45c3c1bb0ULL;
  static const uint64_t static_value2 = 0x74f854b411cdfc9dULL;
};

template<class ContainerAllocator>
struct DataType< ::rcnn_ros::results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rcnn_ros/results";
  }

  static const char* value(const ::rcnn_ros::results_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rcnn_ros::results_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"rcnn_ros/detection[] results\n"
"\n"
"================================================================================\n"
"MSG: rcnn_ros/detection\n"
"int32 label\n"
"float32 score\n"
"float32 x1\n"
"float32 y1\n"
"float32 x2\n"
"float32 y2\n"
"rcnn_ros/point[] contours\n"
"\n"
"================================================================================\n"
"MSG: rcnn_ros/point\n"
"int32 x\n"
"int32 y\n"
;
  }

  static const char* value(const ::rcnn_ros::results_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rcnn_ros::results_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.results);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct results_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rcnn_ros::results_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rcnn_ros::results_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "results[]" << std::endl;
    for (size_t i = 0; i < v.results.size(); ++i)
    {
      s << indent << "  results[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::rcnn_ros::detection_<ContainerAllocator> >::stream(s, indent + "    ", v.results[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCNN_ROS_MESSAGE_RESULTS_H
