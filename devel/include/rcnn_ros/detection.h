// Generated by gencpp from file rcnn_ros/detection.msg
// DO NOT EDIT!


#ifndef RCNN_ROS_MESSAGE_DETECTION_H
#define RCNN_ROS_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rcnn_ros
{
template <class ContainerAllocator>
struct detection_
{
  typedef detection_<ContainerAllocator> Type;

  detection_()
    : class_id(0.0)
    , conf(0.0)
    , x_axis(0.0)
    , y_axis(0.0)
    , weight(0.0)
    , height(0.0)  {
    }
  detection_(const ContainerAllocator& _alloc)
    : class_id(0.0)
    , conf(0.0)
    , x_axis(0.0)
    , y_axis(0.0)
    , weight(0.0)
    , height(0.0)  {
  (void)_alloc;
    }



   typedef float _class_id_type;
  _class_id_type class_id;

   typedef float _conf_type;
  _conf_type conf;

   typedef float _x_axis_type;
  _x_axis_type x_axis;

   typedef float _y_axis_type;
  _y_axis_type y_axis;

   typedef float _weight_type;
  _weight_type weight;

   typedef float _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::rcnn_ros::detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rcnn_ros::detection_<ContainerAllocator> const> ConstPtr;

}; // struct detection_

typedef ::rcnn_ros::detection_<std::allocator<void> > detection;

typedef boost::shared_ptr< ::rcnn_ros::detection > detectionPtr;
typedef boost::shared_ptr< ::rcnn_ros::detection const> detectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rcnn_ros::detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rcnn_ros::detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rcnn_ros::detection_<ContainerAllocator1> & lhs, const ::rcnn_ros::detection_<ContainerAllocator2> & rhs)
{
  return lhs.class_id == rhs.class_id &&
    lhs.conf == rhs.conf &&
    lhs.x_axis == rhs.x_axis &&
    lhs.y_axis == rhs.y_axis &&
    lhs.weight == rhs.weight &&
    lhs.height == rhs.height;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rcnn_ros::detection_<ContainerAllocator1> & lhs, const ::rcnn_ros::detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rcnn_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rcnn_ros::detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rcnn_ros::detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rcnn_ros::detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rcnn_ros::detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcnn_ros::detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rcnn_ros::detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rcnn_ros::detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "18249658e877a86d85ab6523f10897f4";
  }

  static const char* value(const ::rcnn_ros::detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x18249658e877a86dULL;
  static const uint64_t static_value2 = 0x85ab6523f10897f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::rcnn_ros::detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rcnn_ros/detection";
  }

  static const char* value(const ::rcnn_ros::detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rcnn_ros::detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 class_id\n"
"float32 conf\n"
"float32 x_axis\n"
"float32 y_axis\n"
"float32 weight\n"
"float32 height\n"
;
  }

  static const char* value(const ::rcnn_ros::detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rcnn_ros::detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_id);
      stream.next(m.conf);
      stream.next(m.x_axis);
      stream.next(m.y_axis);
      stream.next(m.weight);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rcnn_ros::detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rcnn_ros::detection_<ContainerAllocator>& v)
  {
    s << indent << "class_id: ";
    Printer<float>::stream(s, indent + "  ", v.class_id);
    s << indent << "conf: ";
    Printer<float>::stream(s, indent + "  ", v.conf);
    s << indent << "x_axis: ";
    Printer<float>::stream(s, indent + "  ", v.x_axis);
    s << indent << "y_axis: ";
    Printer<float>::stream(s, indent + "  ", v.y_axis);
    s << indent << "weight: ";
    Printer<float>::stream(s, indent + "  ", v.weight);
    s << indent << "height: ";
    Printer<float>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RCNN_ROS_MESSAGE_DETECTION_H
